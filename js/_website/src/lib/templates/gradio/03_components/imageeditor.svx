
<script lang="ts">
    import {get_object} from "../../process_json.ts";
    import ParamTable from "$lib/components/ParamTable.svelte";
    import ShortcutTable from "$lib/components/ShortcutTable.svelte";
    import DemosSection from "$lib/components/DemosSection.svelte";
    import FunctionsSection from "$lib/components/FunctionsSection.svelte";
    import GuidesSection from "$lib/components/GuidesSection.svelte";
    import CopyButton from "$lib/components/CopyButton.svelte";
    import { style_formatted_text } from "$lib/text";

    let obj = get_object("imageeditor");
    let helper_classes = [get_object("brush"), get_object("eraser")];
</script>

<!--- Title -->
# {obj.name}

<!--- Usage -->
```python
gradio.ImageEditor(···)
```

<!--- Description -->
### Description
## {@html style_formatted_text(obj.description)}

<!-- Behavior -->
### Behavior
## **As input component**: {@html style_formatted_text(obj.preprocess.return_doc.doc)}
##### Your function should accept one of these types:

```python
def predict(
	value: EditorValue | None
)
	...
```

<br>

## **As output component**: {@html style_formatted_text(obj.postprocess.parameter_doc[0].doc)}
##### Your function should return one of these types:

```python
def predict(···) -> EditorValue | ImageType | None
	...	
	return value
```


<!--- Initialization -->
### Initialization
<ParamTable parameters={obj.parameters} />


{#if obj.string_shortcuts && obj.string_shortcuts.length > 0}
<!--- Shortcuts -->
### Shortcuts
<ShortcutTable shortcuts={obj.string_shortcuts} />
{/if}

{#if obj.demos && obj.demos.length > 0}
<!--- Demos -->
### Demos 
<DemosSection demos={obj.demos} />
{/if}

{#if obj.fns && obj.fns.length > 0}
<!--- Event Listeners -->
### Event Listeners 
<FunctionsSection fns={obj.fns} event_listeners={true} />
{/if}

<!-- Helper Classes -->
### Helper Classes 
{#each helper_classes as helper_obj, i}
<div style="margin-left: 3rem">

{#if !i}
<!--- Title -->
### Brush
{:else }
<!--- Title -->
### Eraser
{/if}

{#if !i}
<!--- Usage -->
```python
gradio.Brush(···)
```
{:else }
<!--- Usage -->
```python
gradio.Eraser(···)
```
{/if}

<!--- Description -->
#### Description
## {@html style_formatted_text(helper_obj.description)}

<!--- Initialization -->
#### Initialization
<ParamTable parameters={helper_obj.parameters} />

</div>
{/each}

{#if obj.guides && obj.guides.length > 0}
<!--- Guides -->
### Guides
<GuidesSection guides={obj.guides}/>
{/if}
